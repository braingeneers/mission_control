version: '3.8'

#
# REQUIREMENTS:
#   This docker-compose script depends on only one file on the host machine: ~/.kube/config
#   This is obtained by logging into https://portal.nrp-nautlius.io and being added to the
#   braingeneers namespace. Anyone who should have permissions to run this script should
#   have access to the namespace.
#

services:

  # The secret-fetcher container retrieves all secrets in the `braingeneers` namespace on kubernetes.
  # The files are saved to a shared volume typically mounted at `/secrets`. So for example, the AWS credentials
  # file would be found at `/secrets/prp-s3-credentials/credentials`.
  # The secret-fetcher container is typically a dependency of other containers that need access to the secrets.
  secret-fetcher:
    image: braingeneers/secret-fetcher:latest
    container_name: secret-fetcher
    user: root
    volumes:
      - ~/.kube/config:/.kube/config
      - secrets:/secrets
    networks:
      - braingeneers-net
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 5s
      timeout: 5s
      retries: 120  # Retries allows for max of 10 minutes for secrets to be fetched before service is permanently marked as unhealthy

  # MQTT broker
  mqtt:
    image: braingeneers/mqtt:latest   # derived from emqx/emqx:5.0.4
    container_name: mqtt
    restart: always
    ports:
      - "1883:1883"
      - "8083:8083"
      - "8883:8883"
      - "8084:8084"
      - "18083:18083"
    environment:
      EMQX_NAME: braingeneers_emqx
      EMQX_HOST: 127.0.0.1
    networks:
      braingeneers-net:
        aliases:
          - mqtt.braingeneers.gi.ucsc.edu

  # The nginx-proxy container is used to route traffic to the appropriate service based on the domain name.
  nginx-proxy:
    image: jwilder/nginx-proxy:latest  # braingeneers/nginx-proxy:latest  # derived from jwilder/nginx-proxy:latest
    container_name: nginx-proxy
    volumes:
      - vol-certs:/etc/nginx/certs:rw  # Cache SSL certificates on the host
      - vol-vhost:/etc/nginx/vhost.d
      - vol-html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro  # Unix socket mount to access docker API read-only
    networks:
      - braingeneers-net
    environment:
      DEBUG: "true"
      VERBOSE: "true"
      FORCE_INTERVAL: 15s
      LETSENCRYPT_HOST: braingeneers.gi.ucsc.edu
      LETSENCRYPT_EMAIL: braingeners-admins-group@ucsc.edu
      LETSENCRYPT_TEST: "false"
      DEFAULT_HOST: braingeneers.gi.ucsc.edu
      DEFAULT_PORT: "80"
    ports:
      - "80:80"
      - "443:443"

  # The letsencrypt container is used to automatically generate SSL certificates for the domain names.
  # https://github.com/jwilder/docker-letsencrypt-nginx-proxy-companion
  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt
    environment:
      NGINX_PROXY_CONTAINER: "nginx-proxy"
      LETSENCRYPT_TEST: "true"   # true | false for debugging | production (remember to set corresponding value in NGINX)
      DEBUG: "0"   # 1 | 0 for debugging | production (remember to set corresponding value in nginx-proxy)
      # - ACME_CA_URI=https://acme-staging-v02.api.letsencrypt.org/directory  # comment out for production use
    volumes:
      - vol-certs:/etc/nginx/certs:rw  # Shared with nginx-proxy
      - vol-vhost:/etc/nginx/vhost.d
      - vol-html:/usr/share/nginx/html
      - vol-acme.sh:/etc/acme.sh  # todo try removing this and see if it breaks, I don't think this is actually used
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Unix socket mount to access docker API read-only
    depends_on:
      - nginx-proxy
    networks:
      - braingeneers-net

  # The oauth2_proxy container is used to authenticate users before they can access braingeneers services.
  oauth2-proxy:
    image: braingeneers/oauth2-proxy:latest
    container_name: oauth2-proxy
    command: /run.sh
    entrypoint: /bin/sh
    volumes:
      - vol-certs:/etc/ssl/certs  # SSL certificates
      - secrets:/secrets
    networks:
      - braingeneers-net
    environment:
      # Settings to define a subdomain for this application
      - VIRTUAL_HOST=auth.braingeneers.gi.ucsc.edu
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=auth.braingeneers.gi.ucsc.edu
      - LETSENCRYPT_EMAIL=braingeners-admins-group@ucsc.edu
    depends_on:
      secret-fetcher:
        condition: service_healthy

#  # The dashboard container is used to host the braingeneers dashboard.
#  dashboard:
#    image: braingeneers/dashboard:v1.5
#    container_name: dashboard
#    expose:
#      - "8050"
#    environment:
#      - VIRTUAL_HOST=dashboard.braingeneers.gi.ucsc.edu
#      - VIRTUAL_PORT=8050
#      - LETSENCRYPT_HOST=dashboard.braingeneers.gi.ucsc.edu
#      - LETSENCRYPT_EMAIL=braingeners-admins-group@ucsc.edu
#    volumes:
#      - ~/.aws/credentials:/root/.aws/credentials:ro  # AWS credentials for your application
#    networks:
#      - braingeneers-net
#    depends_on:
#      - secret-fetcher

  # Slack bridge service, replicates messages between Slack and MQTT
  slack-bridge:
    image: braingeneers/service-slack-bridge:latest
    container_name: slack-bridge
    ports:
      - "3000:3000"
    environment:
      - LETSENCRYPT_HOST=slack-bridge.braingeneers.gi.ucsc.edu
      - LETSENCRYPT_EMAIL=braingeners-admins-group@ucsc.edu
    networks:
      - braingeneers-net
    depends_on:
      secret-fetcher:
        condition: service_healthy
    volumes:
      - secrets:/secrets

  # job-launcher launches NRP jobs based on MQTT messages see repo mqtt_job_listener
  job-launcher:
    image: braingeneers/job-launcher:latest
    container_name: job-launcher
    networks:
      - braingeneers-net
    depends_on:
      secret-fetcher:
        condition: service_healthy
    volumes:
      - secrets:/secrets

# The braingeneers-net network is used to connect the containers together.
networks:
  host: {}
  braingeneers-net:
    driver: bridge

# Volumes are persisted on the host machine.
# All services should be able to cold start when volumes are cleared, these are not a place for
# permanent files that can't be replaced, those should be stored on S3 and copied in if needed.
volumes:
  # A shared volume for secrets only in-memory for security
  secrets:
    driver_opts:
      type: tmpfs
      device: tmpfs
  # nginx-proxy, letsencrypt, and oauth2-proxy shared volumes for SSL certificates
  vol-certs:
  vol-vhost:
  vol-html:
  vol-acme.sh: